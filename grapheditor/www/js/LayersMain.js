// :ADDED:PANA:14/03/2018:First version of interface, integrated with rest of the code
// File created by Pana, modified by Pellegrini
//
// This file contains the methods and structures to manipulate Keras Layers.
// The data itself comes from layers.js, a file which is automatically generated by the server

/* KerasInterface serves as a global access point for manipulating Keras Layers
 *
 * It is automatically instanciated and saved in the window.keras variable
 */
KerasInterface = function() {
	this.layerList = {};
	this.groups = {};
}

// Returns the whole layer list generated in layers.js through the instanciation of KerasLayer objects
KerasInterface.prototype.getLayerList = function() {
	return this.layerList;
}

// Returns the list of groups containing layers generated by the instantiation of KerasLayer objects
KerasInterface.prototype.getGroups = function() {
	return this.groups;
}

/* Returns the layer named layerName.
 * Assumes the layer exists
 *
 * Arguments :
 *   layerName - the name of the layer we want to get
 *
 * Returns : The layer named layerName
 */
KerasInterface.prototype.getLayer = function(layerName){
	return this.layerList[layerName];
}

KerasInterface.prototype.getSearchTerm = function(layerName){
	return this.layerList[layerName]['searchTerm'];
}

/* Adds a layer to the main list of layers.
 *
 * Is automatically called by the KerasLayer constructor
 *
 * Arguments:
 *   layerName - the name of the layer
 *   groupName - the name of the group the layer is in
 */
KerasInterface.prototype.addLayerToList = function(layerName, groupName) {
	this.layerList[layerName] = {'groupName' : groupName, 'parameters' : {}};
	this.layerList[layerName]['searchTerm'] = 'keras ' + layerName + ' ' + groupName;
	if(! (groupName in this.groups)){
		this.groups[groupName] = [];
	}
	this.groups[groupName].push(layerName);
}

/* Writes the HTML code representing a new instance of the layer layerName
 *
 * Arguments:
 *   layenName - the name of the layer we want to translate
 *
 * Returns: The HTML code representing an empty instance of the layer layername
 */
KerasInterface.prototype.layerToHTML = function(layerName) {
	var str = '<h3>'+layerName+'</h3>';
	str += '<p hidden="hidden">'+btoa(JSON.stringify({}))+'</p>';
	return str;
}

/* Extracts the layer name from an HTML representation of a layer
 *
 * Arguments:
 *   html - The HTML representation of a layer.
 *
 * Returns: The layer name embedded in it, or null if it is not found
 */
KerasInterface.prototype.extractTitle = function(html) {
	if(! html.split(/<p hidden="hidden">/)[0].split(/<h3>/)[1])
		return null;
	return html.split(/<p hidden="hidden">/)[0].split(/<h3>/)[1].split(/<\/h3>/)[0];
}

/* Parses the JSON in an HTML representation of a layer
 *
 * Arguments:
 *   html - The HTML representation of a layer.
 */
KerasInterface.prototype.extractJson = function(html) {
	return JSON.parse(atob(html.split(/<p hidden="hidden">/)[1].split(/<\/p>/)[0]));
}

/* Writes the parameters in JSON inside an HTML representation of a layer
 *
 * Arguments:
 *   html - The existing HTML representation of a layer to change
 *   json - The parameters to embbed in the HTML representation
 *
 * Returns: The new HTML representation conatining the parameters
 */
KerasInterface.prototype.writeJson = function(html, json) {
	var rS = html.split(/<p hidden="hidden">/)[0]
				 + '<p hidden="hidden">'
				 + btoa(JSON.stringify(json))
				 + '</p>';
	return rS;
}


/* Writes the parameters in JSON inside an HTML representation of a new layer of type layerName
 *
 * Arguments:
 *   layerName - The name of the layer to make an HTML representation of
 *   json      - The parameters to embbed in the HTML representation
 *
 * Returns: The new HTML representation conatining the parameters
 */
KerasInterface.prototype.writeHTML = function(layerName, json) {
	var rS = '<h3>'+layerName+'</h3>'
				 + '<p hidden="hidden">'
				 + btoa(JSON.stringify(json))
				 + '</p>';
	return rS;
}

/* Allows access to the list of parameters of a layer type
 *
 * Arguments:
 *   layerName - The name of the layer we want to inspect
 *
 * Returns: the list of layerName's parameters
 */
KerasInterface.prototype.getLayerParameters = function(layerName) {
	return this.layerList[layerName]['parameters'];
}

KerasInterface.prototype.getLayerParameter = function(layerName, parameter) {
	return this.layerList[layerName]['parameters'][parameter];
}

KerasInterface.prototype.getLayerSearchTerms = function(layerName) {
	return this.layerList[layerName]['searchTerm'];
}

// Globally accessible instance of KerasInterface
window.keras = new KerasInterface();

// -----------------------------------
// KerasLayer objects, only used by layers.js
// -----------------------------------

/* Keras Layer represents a Keras Layer
 *
 * The constructor automatically adds it to the master list of Keras Interface
 * Its only function is to simplify the generation of layer data
 *
 * Arguments:
 *   layerName - The name of the layer
 *   groupName - The name of the group the layer is part of
 */
KerasLayer = function(layerName, groupName) {
	this.name = layerName;
	this.group = groupName;
	this.searchTerm = layerName + groupName + "Keras";
	keras.addLayerToList(layerName,groupName);
}

/* Adds a parameter to the layer
 * Automatically adds it to the master list in KerasInterface
 *
 * Arguments:
 *   param - The parameter to add
 */
KerasLayer.prototype.addParameter = function(param) {
	window.keras.layerList[this.name]['parameters'][param.name] = param;
}

KerasLayer.prototype.createLayerInstance = function() {
	window.keras.layerList[this.name]['parameters'][param.name] = param;
}

// -----------------------------------
// KerasParameters
// -----------------------------------

/* KerasParameter represents a parameter of unknown type
 * Also defines the basic interface of a parameter,
 * in order to be used in polymorphic fashion
 *
 * Arguments:
 *   name - The name of the parameter
 */
KerasParameter = function(name) {
	this.name = name;
	this.getType = function() {
		return this.type;
	}
	this.extractValue = function(json) {
		return null;
	}
}

/* Adds the necessary objects to allow modification of this parameter on
 * the format panel
 *
 * Unfinished and deprecated
 */
//KerasParameter.prototype.addToFormat = function(div, context) {
//	div.appendChild(context.createTitle(this.name))
//}

// Represents a numerical parameter
KerasParameterNumeric = function(name) {
	KerasParameter.call(this, name);
	this.type = 'numeric';
	this.isFloat = false;
	this.min = undefined;
	this.leftClosed = true;
	this.max = undefined;
	this.rightClosed = true;
	this.step = 1;

	this.setTypeToFloat = function(bool){
		if(bool == false)
			this.isFloat = false;
		else
			this.isFloat = true;
	}
	this.setMinimum = function(min, leftClosed){
		this.min = min;
		if(this.leftClosed != true)
			this.leftClosed = false;
	}
	this.setMaximum = function(max, rightClosed){
		this.max = max;
		if(this.rightClosed != true)
			this.rightClosed = false;
	}
	this.setStep = function(step){
		this.step = step;
	}
}

KerasParameterTuple = function(name){
	KerasParameter.call(this, name);
	this.type = 'tuple';
	this.setElementsNumber = function(number){
		this.elementsNumber = number;
	}
	this.setElementsMaxNumber = function(number){
    this.elementsMaxNumber = number;
	}
	this.setElementsMinNumber = function(number){
		this.elementsMinNumber = number;
	}
}


/* Adds the necessary objects to allow modification of this parameter on
 * the format panel
 *
 * Unfinished and deprecated
 */
/*KerasParameterNumeric.prototype.addToFormat = function(div, context) {
	//div.appendChild(context.createTitle('<input />'))
	div.innerHTML += '<p>'+this.name+' : <input /></p>';

}*/

/* Represents a list type parameter
 *
 * You need to add KerasParameterListElement to this parameter
 * in order to represent the possible values.
 *
 * Some parameters may appear when you select a specific choice,
 * to represent that add the parameter to a KerasParameterListElement.
 * If several choices share the same parameter, add the same reference
 * to both KerasParameterListElements
 *
 * Arguments:
 *   name - The name of the parameter
 */
KerasParameterList = function(name) {
	KerasParameter.call(this, name);
	this.type = 'list';
	this.list = {};
}

/* Adds a choice to a list parameter
 * Arguments:
 *   listElement - the element to add
 */
KerasParameterList.prototype.addListElement = function(listElement) {
	this.list[listElement.name] = listElement;
}

/* Represents a choice of a KerasParameterList
 *
 * Arguments:
 *   name - The name of the choice
 */
KerasParameterListElement = function(name) {
	this.name = name;
	this.params = {};
}

/* Adds a conditional parameter to that choice.
 * The parameter becomes active when the choice is selected.
 * Arguments:
 *   param - The parameter to add
 */
KerasParameterListElement.prototype.addParameter = function(param) {

}


KerasLayerInstance = function(html) {
	this.params = {};
	this.layerType = null;
	this.layerName = null;

	this.extractTitle = function(html) {
		if(! html.split(/<p hidden="hidden">/)[0].split(/<h3>/)[1])
			return null;
		this.layerName = html.split(/<p hidden="hidden">/)[0].split(/<h3>/)[1].split(/<\/h3>/)[0];
	}
	this.extractJson = function(html) {
		this.params = JSON.parse(atob(html.split(/<p hidden="hidden">/)[1].split(/<\/p>/)[0]));
	}
	this.fromHTML = function(html){
    this.extractTitle(html);
		this.extractJson(html);
	}
	this.writeHTML = function() {
		var rS = '<h3>'+this.layerName+'</h3>'
					 + '<p hidden="hidden">'
					 + btoa(JSON.stringify(this.params))
					 + '</p>';
		return rS;
	}
	this.setParam = function(param, value){
		this.params[param] = value;
	}
  this.getParam = function(name){
		if(!(name in this.params))
			return null;
		return this.params[name];
	}
	this.fromHTML(html);
}
